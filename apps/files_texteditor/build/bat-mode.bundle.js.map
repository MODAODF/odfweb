{"version":3,"sources":["webpack:///./node_modules/brace/mode/batchfile.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","BatchFileHighlightRules","this","$rules","start","token","regex","caseInsensitive","include","push","next","defaultToken","variable","normalizeRules","metaData","name","scopeName","fileTypes","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id"],"mappings":"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","file":"bat-mode.bundle.js","sourcesContent":["ace.define(\"ace/mode/batchfile_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar BatchFileHighlightRules = function() {\n\n    this.$rules = { start: \n       [ { token: 'keyword.command.dosbatch',\n           regex: '\\\\b(?:append|assoc|at|attrib|break|cacls|cd|chcp|chdir|chkdsk|chkntfs|cls|cmd|color|comp|compact|convert|copy|date|del|dir|diskcomp|diskcopy|doskey|echo|endlocal|erase|fc|find|findstr|format|ftype|graftabl|help|keyb|label|md|mkdir|mode|more|move|path|pause|popd|print|prompt|pushd|rd|recover|ren|rename|replace|restore|rmdir|set|setlocal|shift|sort|start|subst|time|title|tree|type|ver|verify|vol|xcopy)\\\\b',\n           caseInsensitive: true },\n         { token: 'keyword.control.statement.dosbatch',\n           regex: '\\\\b(?:goto|call|exit)\\\\b',\n           caseInsensitive: true },\n         { token: 'keyword.control.conditional.if.dosbatch',\n           regex: '\\\\bif\\\\s+not\\\\s+(?:exist|defined|errorlevel|cmdextversion)\\\\b',\n           caseInsensitive: true },\n         { token: 'keyword.control.conditional.dosbatch',\n           regex: '\\\\b(?:if|else)\\\\b',\n           caseInsensitive: true },\n         { token: 'keyword.control.repeat.dosbatch',\n           regex: '\\\\bfor\\\\b',\n           caseInsensitive: true },\n         { token: 'keyword.operator.dosbatch',\n           regex: '\\\\b(?:EQU|NEQ|LSS|LEQ|GTR|GEQ)\\\\b' },\n         { token: ['doc.comment', 'comment'],\n           regex: '(?:^|\\\\b)(rem)($|\\\\s.*$)',\n           caseInsensitive: true },\n         { token: 'comment.line.colons.dosbatch',\n           regex: '::.*$' },\n         { include: 'variable' },\n         { token: 'punctuation.definition.string.begin.shell',\n           regex: '\"',\n           push: [ \n              { token: 'punctuation.definition.string.end.shell', regex: '\"', next: 'pop' },\n              { include: 'variable' },\n              { defaultToken: 'string.quoted.double.dosbatch' } ] },\n         { token: 'keyword.operator.pipe.dosbatch', regex: '[|]' },\n         { token: 'keyword.operator.redirect.shell',\n           regex: '&>|\\\\d*>&\\\\d*|\\\\d*(?:>>|>|<)|\\\\d*<&|\\\\d*<>' } ],\n        variable: [\n         { token: 'constant.numeric', regex: '%%\\\\w+|%[*\\\\d]|%\\\\w+%'},\n         { token: 'constant.numeric', regex: '%~\\\\d+'},\n         { token: ['markup.list', 'constant.other', 'markup.list'],\n            regex: '(%)(\\\\w+)(%?)' }]};\n    \n    this.normalizeRules();\n};\n\nBatchFileHighlightRules.metaData = { name: 'Batch File',\n      scopeName: 'source.dosbatch',\n      fileTypes: [ 'bat' ] };\n\n\noop.inherits(BatchFileHighlightRules, TextHighlightRules);\n\nexports.BatchFileHighlightRules = BatchFileHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/batchfile\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/batchfile_highlight_rules\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar BatchFileHighlightRules = acequire(\"./batchfile_highlight_rules\").BatchFileHighlightRules;\nvar FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = BatchFileHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"::\";\n    this.blockComment = \"\";\n    this.$id = \"ace/mode/batchfile\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/brace/mode/batchfile.js\n// module id = ./node_modules/brace/mode/batchfile.js\n// module chunks = 29"],"sourceRoot":""}