{"version":3,"sources":["webpack:///./node_modules/brace/mode/python.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","PythonHighlightRules","keywordMapper","this","createKeywordMapper","invalid.deprecated","support.function","constant.language","keyword","strPre","integer","pointFloat","floatNumber","stringEscape","$rules","start","token","regex","next","qqstring3","defaultToken","qstring3","qqstring","qstring","inherits","BaseFoldMode","FoldMode","markers","foldingStartMarker","RegExp","getFoldWidgetRange","session","foldStyle","row","match","getLine","openingBracketBlock","index","indentationBlock","length","call","prototype","TextMode","Mode","PythonFoldMode","Range","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","line","tab","indent","$getIndent","tokens","getTokenizer","getLineTokens","type","outdents","pass","return","raise","break","continue","checkOutdent","input","trim","last","pop","value","autoOutdent","doc","getTabString","slice","remove","$id"],"mappings":"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","file":"py-mode.bundle.js","sourcesContent":["ace.define(\"ace/mode/python_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PythonHighlightRules = function() {\n\n    var keywords = (\n        \"and|as|assert|break|class|continue|def|del|elif|else|except|exec|\" +\n        \"finally|for|from|global|if|import|in|is|lambda|not|or|pass|print|\" +\n        \"raise|return|try|while|with|yield|async|await\"\n    );\n\n    var builtinConstants = (\n        \"True|False|None|NotImplemented|Ellipsis|__debug__\"\n    );\n\n    var builtinFunctions = (\n        \"abs|divmod|input|open|staticmethod|all|enumerate|int|ord|str|any|\" +\n        \"eval|isinstance|pow|sum|basestring|execfile|issubclass|print|super|\" +\n        \"binfile|iter|property|tuple|bool|filter|len|range|type|bytearray|\" +\n        \"float|list|raw_input|unichr|callable|format|locals|reduce|unicode|\" +\n        \"chr|frozenset|long|reload|vars|classmethod|getattr|map|repr|xrange|\" +\n        \"cmp|globals|max|reversed|zip|compile|hasattr|memoryview|round|\" +\n        \"__import__|complex|hash|min|set|apply|delattr|help|next|setattr|\" +\n        \"buffer|dict|hex|object|slice|coerce|dir|id|oct|sorted|intern\"\n    );\n    var keywordMapper = this.createKeywordMapper({\n        \"invalid.deprecated\": \"debugger\",\n        \"support.function\": builtinFunctions,\n        \"constant.language\": builtinConstants,\n        \"keyword\": keywords\n    }, \"identifier\");\n\n    var strPre = \"(?:r|u|ur|R|U|UR|Ur|uR)?\";\n\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var binInteger = \"(?:0[bB][01]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\n\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" +  intPart + \")\" + exponent + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n\n    var stringEscape =  \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment\",\n            regex : \"#.*$\"\n        }, {\n            token : \"string\",           // multi line \"\"\" string start\n            regex : strPre + '\"{3}',\n            next : \"qqstring3\"\n        }, {\n            token : \"string\",           // \" string\n            regex : strPre + '\"(?=.)',\n            next : \"qqstring\"\n        }, {\n            token : \"string\",           // multi line ''' string start\n            regex : strPre + \"'{3}\",\n            next : \"qstring3\"\n        }, {\n            token : \"string\",           // ' string\n            regex : strPre + \"'(?=.)\",\n            next : \"qstring\"\n        }, {\n            token : \"constant.numeric\", // imaginary\n            regex : \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\n        }, {\n            token : \"constant.numeric\", // float\n            regex : floatNumber\n        }, {\n            token : \"constant.numeric\", // long integer\n            regex : integer + \"[lL]\\\\b\"\n        }, {\n            token : \"constant.numeric\", // integer\n            regex : integer + \"\\\\b\"\n        }, {\n            token : keywordMapper,\n            regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }, {\n            token : \"keyword.operator\",\n            regex : \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|%|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n        }, {\n            token : \"paren.lparen\",\n            regex : \"[\\\\[\\\\(\\\\{]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\]\\\\)\\\\}]\"\n        }, {\n            token : \"text\",\n            regex : \"\\\\s+\"\n        } ],\n        \"qqstring3\" : [ {\n            token : \"constant.language.escape\",\n            regex : stringEscape\n        }, {\n            token : \"string\", // multi line \"\"\" string end\n            regex : '\"{3}',\n            next : \"start\"\n        }, {\n            defaultToken : \"string\"\n        } ],\n        \"qstring3\" : [ {\n            token : \"constant.language.escape\",\n            regex : stringEscape\n        }, {\n            token : \"string\",  // multi line ''' string end\n            regex : \"'{3}\",\n            next : \"start\"\n        }, {\n            defaultToken : \"string\"\n        } ],\n        \"qqstring\" : [{\n            token : \"constant.language.escape\",\n            regex : stringEscape\n        }, {\n            token : \"string\",\n            regex : \"\\\\\\\\$\",\n            next  : \"qqstring\"\n        }, {\n            token : \"string\",\n            regex : '\"|$',\n            next  : \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"qstring\" : [{\n            token : \"constant.language.escape\",\n            regex : stringEscape\n        }, {\n            token : \"string\",\n            regex : \"\\\\\\\\$\",\n            next  : \"qstring\"\n        }, {\n            token : \"string\",\n            regex : \"'|$\",\n            next  : \"start\"\n        }, {\n            defaultToken: \"string\"\n        }]\n    };\n};\n\noop.inherits(PythonHighlightRules, TextHighlightRules);\n\nexports.PythonHighlightRules = PythonHighlightRules;\n});\n\nace.define(\"ace/mode/folding/pythonic\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(markers) {\n    this.foldingStartMarker = new RegExp(\"([\\\\[{])(?:\\\\s*)$|(\" + markers + \")(?:\\\\s*)(?:#.*)?$\");\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, match.index);\n            if (match[2])\n                return this.indentationBlock(session, row, match.index + match[2].length);\n            return this.indentationBlock(session, row);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/python\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/python_highlight_rules\",\"ace/mode/folding/pythonic\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar PythonHighlightRules = acequire(\"./python_highlight_rules\").PythonHighlightRules;\nvar PythonFoldMode = acequire(\"./folding/pythonic\").FoldMode;\nvar Range = acequire(\"../range\").Range;\n\nvar Mode = function() {\n    this.HighlightRules = PythonHighlightRules;\n    this.foldingRules = new PythonFoldMode(\"\\\\:\");\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    var outdents = {\n        \"pass\": 1,\n        \"return\": 1,\n        \"raise\": 1,\n        \"break\": 1,\n        \"continue\": 1\n    };\n    \n    this.checkOutdent = function(state, line, input) {\n        if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\")\n            return false;\n\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n        \n        if (!tokens)\n            return false;\n        do {\n            var last = tokens.pop();\n        } while (last && (last.type == \"comment\" || (last.type == \"text\" && last.value.match(/^\\s+$/))));\n        \n        if (!last)\n            return false;\n        \n        return (last.type == \"keyword\" && outdents[last.value]);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        \n        row += 1;\n        var indent = this.$getIndent(doc.getLine(row));\n        var tab = doc.getTabString();\n        if (indent.slice(-tab.length) == tab)\n            doc.remove(new Range(row, indent.length-tab.length, row, indent.length));\n    };\n\n    this.$id = \"ace/mode/python\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/brace/mode/python.js\n// module id = ./node_modules/brace/mode/python.js\n// module chunks = 21"],"sourceRoot":""}