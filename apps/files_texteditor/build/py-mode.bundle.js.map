{"version":3,"sources":["webpack:///./node_modules/brace/mode/python.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","PythonHighlightRules","keywordMapper","this","createKeywordMapper","strPre","integer","pointFloat","floatNumber","stringEscape","$rules","token","regex","next","defaultToken","inherits","BaseFoldMode","FoldMode","markers","foldingStartMarker","RegExp","getFoldWidgetRange","session","foldStyle","row","match","getLine","openingBracketBlock","index","indentationBlock","length","call","prototype","TextMode","Mode","PythonFoldMode","Range","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","state","line","tab","indent","$getIndent","tokens","getTokenizer","getLineTokens","type","outdents","checkOutdent","input","trim","last","pop","value","autoOutdent","doc","getTabString","slice","remove","$id"],"mappings":"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","file":"py-mode.bundle.js","sourcesContent":["ace.define(\"ace/mode/python_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PythonHighlightRules = function() {\n\n    var keywords = (\n        \"and|as|assert|break|class|continue|def|del|elif|else|except|exec|\" +\n        \"finally|for|from|global|if|import|in|is|lambda|not|or|pass|print|\" +\n        \"raise|return|try|while|with|yield|async|await\"\n    );\n\n    var builtinConstants = (\n        \"True|False|None|NotImplemented|Ellipsis|__debug__\"\n    );\n\n    var builtinFunctions = (\n        \"abs|divmod|input|open|staticmethod|all|enumerate|int|ord|str|any|\" +\n        \"eval|isinstance|pow|sum|basestring|execfile|issubclass|print|super|\" +\n        \"binfile|iter|property|tuple|bool|filter|len|range|type|bytearray|\" +\n        \"float|list|raw_input|unichr|callable|format|locals|reduce|unicode|\" +\n        \"chr|frozenset|long|reload|vars|classmethod|getattr|map|repr|xrange|\" +\n        \"cmp|globals|max|reversed|zip|compile|hasattr|memoryview|round|\" +\n        \"__import__|complex|hash|min|set|apply|delattr|help|next|setattr|\" +\n        \"buffer|dict|hex|object|slice|coerce|dir|id|oct|sorted|intern\"\n    );\n    var keywordMapper = this.createKeywordMapper({\n        \"invalid.deprecated\": \"debugger\",\n        \"support.function\": builtinFunctions,\n        \"constant.language\": builtinConstants,\n        \"keyword\": keywords\n    }, \"identifier\");\n\n    var strPre = \"(?:r|u|ur|R|U|UR|Ur|uR)?\";\n\n    var decimalInteger = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n    var octInteger = \"(?:0[oO]?[0-7]+)\";\n    var hexInteger = \"(?:0[xX][\\\\dA-Fa-f]+)\";\n    var binInteger = \"(?:0[bB][01]+)\";\n    var integer = \"(?:\" + decimalInteger + \"|\" + octInteger + \"|\" + hexInteger + \"|\" + binInteger + \")\";\n\n    var exponent = \"(?:[eE][+-]?\\\\d+)\";\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" +  intPart + \")\" + exponent + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n\n    var stringEscape =  \"\\\\\\\\(x[0-9A-Fa-f]{2}|[0-7]{3}|[\\\\\\\\abfnrtv'\\\"]|U[0-9A-Fa-f]{8}|u[0-9A-Fa-f]{4})\";\n\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment\",\n            regex : \"#.*$\"\n        }, {\n            token : \"string\",           // multi line \"\"\" string start\n            regex : strPre + '\"{3}',\n            next : \"qqstring3\"\n        }, {\n            token : \"string\",           // \" string\n            regex : strPre + '\"(?=.)',\n            next : \"qqstring\"\n        }, {\n            token : \"string\",           // multi line ''' string start\n            regex : strPre + \"'{3}\",\n            next : \"qstring3\"\n        }, {\n            token : \"string\",           // ' string\n            regex : strPre + \"'(?=.)\",\n            next : \"qstring\"\n        }, {\n            token : \"constant.numeric\", // imaginary\n            regex : \"(?:\" + floatNumber + \"|\\\\d+)[jJ]\\\\b\"\n        }, {\n            token : \"constant.numeric\", // float\n            regex : floatNumber\n        }, {\n            token : \"constant.numeric\", // long integer\n            regex : integer + \"[lL]\\\\b\"\n        }, {\n            token : \"constant.numeric\", // integer\n            regex : integer + \"\\\\b\"\n        }, {\n            token : keywordMapper,\n            regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }, {\n            token : \"keyword.operator\",\n            regex : \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|%|<<|>>|&|\\\\||\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n        }, {\n            token : \"paren.lparen\",\n            regex : \"[\\\\[\\\\(\\\\{]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\]\\\\)\\\\}]\"\n        }, {\n            token : \"text\",\n            regex : \"\\\\s+\"\n        } ],\n        \"qqstring3\" : [ {\n            token : \"constant.language.escape\",\n            regex : stringEscape\n        }, {\n            token : \"string\", // multi line \"\"\" string end\n            regex : '\"{3}',\n            next : \"start\"\n        }, {\n            defaultToken : \"string\"\n        } ],\n        \"qstring3\" : [ {\n            token : \"constant.language.escape\",\n            regex : stringEscape\n        }, {\n            token : \"string\",  // multi line ''' string end\n            regex : \"'{3}\",\n            next : \"start\"\n        }, {\n            defaultToken : \"string\"\n        } ],\n        \"qqstring\" : [{\n            token : \"constant.language.escape\",\n            regex : stringEscape\n        }, {\n            token : \"string\",\n            regex : \"\\\\\\\\$\",\n            next  : \"qqstring\"\n        }, {\n            token : \"string\",\n            regex : '\"|$',\n            next  : \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        \"qstring\" : [{\n            token : \"constant.language.escape\",\n            regex : stringEscape\n        }, {\n            token : \"string\",\n            regex : \"\\\\\\\\$\",\n            next  : \"qstring\"\n        }, {\n            token : \"string\",\n            regex : \"'|$\",\n            next  : \"start\"\n        }, {\n            defaultToken: \"string\"\n        }]\n    };\n};\n\noop.inherits(PythonHighlightRules, TextHighlightRules);\n\nexports.PythonHighlightRules = PythonHighlightRules;\n});\n\nace.define(\"ace/mode/folding/pythonic\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(markers) {\n    this.foldingStartMarker = new RegExp(\"([\\\\[{])(?:\\\\s*)$|(\" + markers + \")(?:\\\\s*)(?:#.*)?$\");\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, match.index);\n            if (match[2])\n                return this.indentationBlock(session, row, match.index + match[2].length);\n            return this.indentationBlock(session, row);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/python\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/python_highlight_rules\",\"ace/mode/folding/pythonic\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar PythonHighlightRules = acequire(\"./python_highlight_rules\").PythonHighlightRules;\nvar PythonFoldMode = acequire(\"./folding/pythonic\").FoldMode;\nvar Range = acequire(\"../range\").Range;\n\nvar Mode = function() {\n    this.HighlightRules = PythonHighlightRules;\n    this.foldingRules = new PythonFoldMode(\"\\\\:\");\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    var outdents = {\n        \"pass\": 1,\n        \"return\": 1,\n        \"raise\": 1,\n        \"break\": 1,\n        \"continue\": 1\n    };\n    \n    this.checkOutdent = function(state, line, input) {\n        if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\")\n            return false;\n\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n        \n        if (!tokens)\n            return false;\n        do {\n            var last = tokens.pop();\n        } while (last && (last.type == \"comment\" || (last.type == \"text\" && last.value.match(/^\\s+$/))));\n        \n        if (!last)\n            return false;\n        \n        return (last.type == \"keyword\" && outdents[last.value]);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        \n        row += 1;\n        var indent = this.$getIndent(doc.getLine(row));\n        var tab = doc.getTabString();\n        if (indent.slice(-tab.length) == tab)\n            doc.remove(new Range(row, indent.length-tab.length, row, indent.length));\n    };\n\n    this.$id = \"ace/mode/python\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}