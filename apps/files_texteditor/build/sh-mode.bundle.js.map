{"version":3,"sources":["webpack:///./node_modules/brace/mode/sh.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","reservedKeywords","languageConstructs","ShHighlightRules","keywordMapper","this","createKeywordMapper","$rules","token","regex","push","include","next","defaultToken","stateName","onMatch","value","currentState","stack","tokens","split","splitRegex","type","rules","heredoc","shift","indentedHeredoc","start","end","integer","variables","normalizeRules","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","match","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","CStyleFoldMode","CstyleBehaviour","HighlightRules","foldingRules","$behaviour","lineCommentStart","getNextLineIndent","state","tab","$getIndent","getTokenizer","getLineTokens","outdents","checkOutdent","input","trim","last","pop","autoOutdent","doc","getTabString","slice","remove","$id"],"mappings":"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","file":"sh-mode.bundle.js","sourcesContent":["ace.define(\"ace/mode/sh_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar reservedKeywords = exports.reservedKeywords = (\n        '!|{|}|case|do|done|elif|else|'+\n        'esac|fi|for|if|in|then|until|while|'+\n        '&|;|export|local|read|typeset|unset|'+\n        'elif|select|set|function|declare|readonly'\n    );\n\nvar languageConstructs = exports.languageConstructs = (\n    '[|]|alias|bg|bind|break|builtin|'+\n     'cd|command|compgen|complete|continue|'+\n     'dirs|disown|echo|enable|eval|exec|'+\n     'exit|fc|fg|getopts|hash|help|history|'+\n     'jobs|kill|let|logout|popd|printf|pushd|'+\n     'pwd|return|set|shift|shopt|source|'+\n     'suspend|test|times|trap|type|ulimit|'+\n     'umask|unalias|wait'\n);\n\nvar ShHighlightRules = function() {\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword\": reservedKeywords,\n        \"support.function.builtin\": languageConstructs,\n        \"invalid.deprecated\": \"debugger\"\n    }, \"identifier\");\n\n    var integer = \"(?:(?:[1-9]\\\\d*)|(?:0))\";\n\n    var fraction = \"(?:\\\\.\\\\d+)\";\n    var intPart = \"(?:\\\\d+)\";\n    var pointFloat = \"(?:(?:\" + intPart + \"?\" + fraction + \")|(?:\" + intPart + \"\\\\.))\";\n    var exponentFloat = \"(?:(?:\" + pointFloat + \"|\" +  intPart + \")\" + \")\";\n    var floatNumber = \"(?:\" + exponentFloat + \"|\" + pointFloat + \")\";\n    var fileDescriptor = \"(?:&\" + intPart + \")\";\n\n    var variableName = \"[a-zA-Z_][a-zA-Z0-9_]*\";\n    var variable = \"(?:\" + variableName + \"(?==))\";\n\n    var builtinVariable = \"(?:\\\\$(?:SHLVL|\\\\$|\\\\!|\\\\?))\";\n\n    var func = \"(?:\" + variableName + \"\\\\s*\\\\(\\\\))\";\n\n    this.$rules = {\n        \"start\" : [{\n            token : \"constant\",\n            regex : /\\\\./\n        }, {\n            token : [\"text\", \"comment\"],\n            regex : /(^|\\s)(#.*)$/\n        }, {\n            token : \"string.start\",\n            regex : '\"',\n            push : [{\n                token : \"constant.language.escape\",\n                regex : /\\\\(?:[$`\"\\\\]|$)/\n            }, {\n                include : \"variables\"\n            }, {\n                token : \"keyword.operator\",\n                regex : /`/ // TODO highlight `\n            }, {\n                token : \"string.end\",\n                regex : '\"',\n                next: \"pop\"\n            }, {\n                defaultToken: \"string\"\n            }]\n        }, {\n            token : \"string\",\n            regex : \"\\\\$'\",\n            push : [{\n                token : \"constant.language.escape\",\n                regex : /\\\\(?:[abeEfnrtv\\\\'\"]|x[a-fA-F\\d]{1,2}|u[a-fA-F\\d]{4}([a-fA-F\\d]{4})?|c.|\\d{1,3})/\n            }, {\n                token : \"string\",\n                regex : \"'\",\n                next: \"pop\"\n            }, {\n                defaultToken: \"string\"\n            }]\n        }, {\n            regex : \"<<<\",\n            token : \"keyword.operator\"\n        }, {\n            stateName: \"heredoc\",\n            regex : \"(<<-?)(\\\\s*)(['\\\"`]?)([\\\\w\\\\-]+)(['\\\"`]?)\",\n            onMatch : function(value, currentState, stack) {\n                var next = value[2] == '-' ? \"indentedHeredoc\" : \"heredoc\";\n                var tokens = value.split(this.splitRegex);\n                stack.push(next, tokens[4]);\n                return [\n                    {type:\"constant\", value: tokens[1]},\n                    {type:\"text\", value: tokens[2]},\n                    {type:\"string\", value: tokens[3]},\n                    {type:\"support.class\", value: tokens[4]},\n                    {type:\"string\", value: tokens[5]}\n                ];\n            },\n            rules: {\n                heredoc: [{\n                    onMatch:  function(value, currentState, stack) {\n                        if (value === stack[1]) {\n                            stack.shift();\n                            stack.shift();\n                            this.next = stack[0] || \"start\";\n                            return \"support.class\";\n                        }\n                        this.next = \"\";\n                        return \"string\";\n                    },\n                    regex: \".*$\",\n                    next: \"start\"\n                }],\n                indentedHeredoc: [{\n                    token: \"string\",\n                    regex: \"^\\t+\"\n                }, {\n                    onMatch:  function(value, currentState, stack) {\n                        if (value === stack[1]) {\n                            stack.shift();\n                            stack.shift();\n                            this.next = stack[0] || \"start\";\n                            return \"support.class\";\n                        }\n                        this.next = \"\";\n                        return \"string\";\n                    },\n                    regex: \".*$\",\n                    next: \"start\"\n                }]\n            }\n        }, {\n            regex : \"$\",\n            token : \"empty\",\n            next : function(currentState, stack) {\n                if (stack[0] === \"heredoc\" || stack[0] === \"indentedHeredoc\")\n                    return stack[0];\n                return currentState;\n            }\n        }, {\n            token : [\"keyword\", \"text\", \"text\", \"text\", \"variable\"],\n            regex : /(declare|local|readonly)(\\s+)(?:(-[fixar]+)(\\s+))?([a-zA-Z_][a-zA-Z0-9_]*\\b)/\n        }, {\n            token : \"variable.language\",\n            regex : builtinVariable\n        }, {\n            token : \"variable\",\n            regex : variable\n        }, {\n            include : \"variables\"\n        }, {\n            token : \"support.function\",\n            regex : func\n        }, {\n            token : \"support.function\",\n            regex : fileDescriptor\n        }, {\n            token : \"string\",           // ' string\n            start : \"'\", end : \"'\"\n        }, {\n            token : \"constant.numeric\", // float\n            regex : floatNumber\n        }, {\n            token : \"constant.numeric\", // integer\n            regex : integer + \"\\\\b\"\n        }, {\n            token : keywordMapper,\n            regex : \"[a-zA-Z_][a-zA-Z0-9_]*\\\\b\"\n        }, {\n            token : \"keyword.operator\",\n            regex : \"\\\\+|\\\\-|\\\\*|\\\\*\\\\*|\\\\/|\\\\/\\\\/|~|<|>|<=|=>|=|!=|[%&|`]\"\n        }, {\n            token : \"punctuation.operator\",\n            regex : \";\"\n        }, {\n            token : \"paren.lparen\",\n            regex : \"[\\\\[\\\\(\\\\{]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\]]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\)\\\\}]\",\n            next : \"pop\"\n        }],\n        variables: [{\n            token : \"variable\",\n            regex : /(\\$)(\\w+)/\n        }, {\n            token : [\"variable\", \"paren.lparen\"],\n            regex : /(\\$)(\\()/,\n            push : \"start\"\n        }, {\n            token : [\"variable\", \"paren.lparen\", \"keyword.operator\", \"variable\", \"keyword.operator\"],\n            regex : /(\\$)(\\{)([#!]?)(\\w+|[*@#?\\-$!0_])(:[?+\\-=]?|##?|%%?|,,?\\/|\\^\\^?)?/,\n            push : \"start\"\n        }, {\n            token : \"variable\",\n            regex : /\\$[*@#?\\-$!0_]/\n        }, {\n            token : [\"variable\", \"paren.lparen\"],\n            regex : /(\\$)(\\{)/,\n            push : \"start\"\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\noop.inherits(ShHighlightRules, TextHighlightRules);\n\nexports.ShHighlightRules = ShHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/sh\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/sh_highlight_rules\",\"ace/range\",\"ace/mode/folding/cstyle\",\"ace/mode/behaviour/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar ShHighlightRules = acequire(\"./sh_highlight_rules\").ShHighlightRules;\nvar Range = acequire(\"../range\").Range;\nvar CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\nvar CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\n\nvar Mode = function() {\n    this.HighlightRules = ShHighlightRules;\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = new CstyleBehaviour();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n   \n    this.lineCommentStart = \"#\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[:]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    var outdents = {\n        \"pass\": 1,\n        \"return\": 1,\n        \"raise\": 1,\n        \"break\": 1,\n        \"continue\": 1\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        if (input !== \"\\r\\n\" && input !== \"\\r\" && input !== \"\\n\")\n            return false;\n\n        var tokens = this.getTokenizer().getLineTokens(line.trim(), state).tokens;\n\n        if (!tokens)\n            return false;\n        do {\n            var last = tokens.pop();\n        } while (last && (last.type == \"comment\" || (last.type == \"text\" && last.value.match(/^\\s+$/))));\n\n        if (!last)\n            return false;\n\n        return (last.type == \"keyword\" && outdents[last.value]);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n\n        row += 1;\n        var indent = this.$getIndent(doc.getLine(row));\n        var tab = doc.getTabString();\n        if (indent.slice(-tab.length) == tab)\n            doc.remove(new Range(row, indent.length-tab.length, row, indent.length));\n    };\n\n    this.$id = \"ace/mode/sh\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}